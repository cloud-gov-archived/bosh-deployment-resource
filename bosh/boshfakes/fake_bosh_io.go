// Code generated by counterfeiter. DO NOT EDIT.
package boshfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-deployment-resource/bosh"
)

type FakeBoshIO struct {
	StemcellsStub        func(string) ([]byte, error)
	stemcellsMutex       sync.RWMutex
	stemcellsArgsForCall []struct {
		arg1 string
	}
	stemcellsReturns struct {
		result1 []byte
		result2 error
	}
	stemcellsReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBoshIO) Stemcells(arg1 string) ([]byte, error) {
	fake.stemcellsMutex.Lock()
	ret, specificReturn := fake.stemcellsReturnsOnCall[len(fake.stemcellsArgsForCall)]
	fake.stemcellsArgsForCall = append(fake.stemcellsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Stemcells", []interface{}{arg1})
	fake.stemcellsMutex.Unlock()
	if fake.StemcellsStub != nil {
		return fake.StemcellsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stemcellsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBoshIO) StemcellsCallCount() int {
	fake.stemcellsMutex.RLock()
	defer fake.stemcellsMutex.RUnlock()
	return len(fake.stemcellsArgsForCall)
}

func (fake *FakeBoshIO) StemcellsCalls(stub func(string) ([]byte, error)) {
	fake.stemcellsMutex.Lock()
	defer fake.stemcellsMutex.Unlock()
	fake.StemcellsStub = stub
}

func (fake *FakeBoshIO) StemcellsArgsForCall(i int) string {
	fake.stemcellsMutex.RLock()
	defer fake.stemcellsMutex.RUnlock()
	argsForCall := fake.stemcellsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeBoshIO) StemcellsReturns(result1 []byte, result2 error) {
	fake.stemcellsMutex.Lock()
	defer fake.stemcellsMutex.Unlock()
	fake.StemcellsStub = nil
	fake.stemcellsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshIO) StemcellsReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.stemcellsMutex.Lock()
	defer fake.stemcellsMutex.Unlock()
	fake.StemcellsStub = nil
	if fake.stemcellsReturnsOnCall == nil {
		fake.stemcellsReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.stemcellsReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeBoshIO) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.stemcellsMutex.RLock()
	defer fake.stemcellsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBoshIO) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ bosh.BoshIO = new(FakeBoshIO)
